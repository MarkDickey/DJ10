#include <LIDARLite_v4LED.h>
#include <LIDARLite.h>
#include <LIDARLite_v3HP.h>
// Globals
LIDARLite lidarLite;
int cal_cnt = 0;
#include <Servo.h>
#include <Wire.h>
Servo servo; // horizontal servo
int servoAngle = 45;
int servoAngleLimitHigh = 60;
int servoAngleLimitLow = 1;

double sensed_variable, control_signal;
double setpoint = 79.0;
double error;
double Kp = 3.0; //proportional gain
double Ki = 0.50; //integral gain
double Kd = 3.0; //derivative gain
int T = 100; //sample time in milliseconds (ms)
unsigned long last_time = 0;
double total_error = 0.0; 
double last_error = 0.0;
//int max_control = ;
//int min_control;

void setup(){
 servo.attach(9);
 servo.write(45);
 Serial.begin(9600); // Initialize serial connection to display distance readings
 lidarLite.begin(0, true); // Set configuration to default and I2C to 400 kHz
 lidarLite.configure(0); // Change this number to try out alternate configurations
}


void loop()
{
  int dist;

  // At the beginning of every 100 readings,
  // take a measurement with receiver bias correction
  if ( cal_cnt == 0 ) {
    dist = lidarLite.distance();      // With bias correction
  } else {
    dist = lidarLite.distance(false); // Without bias correction
  }
  sensed_variable=dist; 
  // Increment reading counter
  cal_cnt++;
  cal_cnt = cal_cnt % 100;

  // Display distance
 //Serial.println(dist);
 // Serial.println(" cm");

  //delay(10);
  

 //Serial.print


PID_Control(); //calls the PID function every T interval and outputs a control signal 
//Serial.println (control_signal);
servoAngle = -control_signal+90; 
servo.write(constrain(servoAngle, 60,120));
}

void PID_Control(){

  unsigned long current_time = millis(); //returns the number of milliseconds passed since the Arduino started running the program
  
  int delta_time = current_time - last_time; //delta time interval
  
  if (delta_time >= T){
    
   error = setpoint - sensed_variable;
    
    total_error += error; //accumalates the error - integral term
    //if (total_error >= max_control) total_error = max_control;
    //else if (total_error <= min_control) total_error = min_control;
    
    double delta_error = error - last_error; //difference of error for derivative term
    
    
    control_signal = Kp*error + (Ki*T)*total_error + (Kd/T)*delta_error; //PID control compute.  change 82 later to whatever actual value is 
    //if (control_signal >= servoAngleLimitHigh ) control_signal = servoAngleLimitHigh;
    //else if (control_signal <= servoAngleLimitLow) control_signal = servoAngleLimitLow;
    
    last_error = error;
    last_time = current_time;
    Serial.println(control_signal);
    
  }
}
